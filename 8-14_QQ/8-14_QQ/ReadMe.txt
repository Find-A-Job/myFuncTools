========================================================================
    WIN32 应用程序：8-14_QQ 项目概述
========================================================================

应用程序向导已为您创建了此 8-14_QQ 应用程序。

本文件概要介绍组成 8-14_QQ 应用程序的每个文件的内容。


8-14_QQ.vcxproj
    这是使用应用程序向导生成的 VC++ 项目的主项目文件，其中包含生成该文件的 Visual C++ 的版本信息，以及有关使用应用程序向导选择的平台、配置和项目功能的信息。

8-14_QQ.vcxproj.filters
    这是使用“应用程序向导”生成的 VC++ 项目筛选器文件。它包含有关项目文件与筛选器之间的关联信息。在 IDE 中，通过这种关联，在特定节点下以分组形式显示具有相似扩展名的文件。例如，“.cpp”文件与“源文件”筛选器关联。

8-14_QQ.cpp
    这是主应用程序源文件。

/////////////////////////////////////////////////////////////////////////////
应用程序向导创建了下列资源：

8-14_QQ.rc
    这是程序使用的所有 Microsoft Windows 资源的列表。它包括 RES 子目录中存储的图标、位图和光标。此文件可以直接在 Microsoft Visual C++ 中进行编辑。

Resource.h
    这是标准头文件，可用于定义新的资源 ID。Microsoft Visual C++ 将读取并更新此文件。

8-14_QQ.ico
    这是用作应用程序图标 (32x32) 的图标文件。此图标包括在主资源文件 8-14_QQ.rc 中。

small.ico
    这是一个图标文件，其中包含应用程序的图标的较小版本 (16x16)。此图标包括在主资源文件 8-14_QQ.rc 中。

/////////////////////////////////////////////////////////////////////////////
其他标准文件:

StdAfx.h, StdAfx.cpp
    这些文件用于生成名为 8-14_QQ.pch 的预编译头 (PCH) 文件和名为 StdAfx.obj 的预编译类型文件。

/////////////////////////////////////////////////////////////////////////////
其他注释:

应用程序向导使用“TODO:”注释来指示应添加或自定义的源代码部分。

/////////////////////////////////////////////////////////////////////////////
2018-8-14
1.提出方案-可视化局域网传输工具
2.主窗口初始化
2018-8-15
1.创建了8个控件
2.调整控件位置
...
...
2018-8-20
1.增加一个控件按钮
2.完成按钮初始化
3.对程序重新分层
4.完成客户端和服务端基本功能
5.完成socket连接部分
2018-8-21
1.初步完成文件收发函数
2.优化程序结构，模块化处理流程
3.为每个模块增加日志记录功能
4.增加了UNICODE版本的文件收发函数
新增的函数
    1.从路径中提取文件名及后缀
删除的函数
	1.myWinSockSend
	2.myWinSockRecv
2018-8-22
新增的函数

删除的函数

完成的功能

未完成的功能
1.多文件传输
2.文件夹传输
3.多线程处理阻塞socket
4.制定通信规则
5.按钮禁用/启用优化
6.设置初始化配置文件
7.本机ip组获取
8.智能化收发

碰到的问题

心得
1.socket程序处理异常时，除了本地要解决问题外，还需要通知另一端发生异常中断
2018-8-23
新增的函数
int useThread(void);									//线程启动
UINT __stdcall recvSendRequest(void *);					//处理收发消息
UINT __stdcall recvSendFILE(void *);					//收发文件

删除的函数

完成的功能
1.多线程协同工作框架

未完成的功能
1.多文件传输
2.文件夹传输
3.多线程处理阻塞socket
4.制定通信规则
5.按钮禁用/启用优化
6.设置初始化配置文件
7.本机ip组获取
8.智能化收发

碰到的问题

心得
1.界面多线程开发，有阻塞的语句都用线程来执行
2.多线程协同工作，核心就是各个线程之间的通信，同一时间确保只有一个线程在判断变量（称之为判变线程），
其他线程在改完变量之后赋值给全局变量（此变量允许该线程读写，其他线程只能读）并立即退出（称之为改变线程），
后续由判变线程激活改变线程，并传递相关数据
2018-8-24
新增的函数
UINT __stdcall socketStartUp(void *argv)

删除的函数

完成的功能
1.将socket启动程序也放入一个新的线程中
2.已实现文件互传

未完成的功能
1.多文件传输
2.文件夹传输
//3.多线程处理阻塞socket
//4.制定通信规则
5.按钮禁用/启用优化
6.设置初始化配置文件
7.本机ip组获取
8.智能化收发

碰到的问题

心得

2018-8-24
新增的函数

删除的函数

完成的功能

未完成的功能
1.多文件传输
2.文件夹传输
5.按钮禁用/启用优化
6.设置初始化配置文件
7.本机ip组获取
8.智能化收发

碰到的问题

心得
2018-8-28
新增的函数
1.
删除的函数

完成的功能
1.利用_findfirst循环检测文件夹内部文件
未完成的功能
1.多文件传输
2.文件夹传输
5.按钮禁用/启用优化
6.设置初始化配置文件
7.本机ip组获取
8.智能化收发

碰到的问题

心得
1._beginThreadEx和_endThreadEx配套使用
2.在判断有无子目录的if分支中，由于系统在进入一个子目录时，匹配到的头两个文件(夹)是"."(当前目录)，".."(上一层目录)。//牢记教训
2018-8-28
新增的函数
1.
删除的函数

完成的功能

未完成的功能
1.多文件传输
2.文件夹传输
5.按钮禁用/启用优化
6.设置初始化配置文件
7.本机ip组获取
8.智能化收发

碰到的问题

心得
1.copymemory函数中，最后一个参数是以byte为单位，所以TCHAR类型的拷贝应该乘以2
2.send函数中，发送TCHAR类型的数值时，长度需要乘以2   ---recv同理
3.在多线程中要注意全局变量的竞争
2018-8-30
新增的函数
1.
删除的函数

完成的功能
1.多文件传输
2.文件夹传输
3.优化了一部分按钮禁用/启用

未完成的功能
5.按钮禁用/启用优化
6.设置初始化配置文件
7.本机ip组获取
8.智能化收发

碰到的问题

心得
1.文件收发规则:首先发送256TCHAR字节长的文件名， 接下来是4char字节长的文件大小，然后是每个包1024char字节的
2.接收的时候，recv不能判断出什么时候传输完成，需要先传输一下文件字节数，每次接收完之后比对一下，以此来结束recv
3._countof()和sizeof()相乘时，如果涉及到TCHAR类型，数值可能会是预估值的两倍，推测原因是TCHAR和char相关的问题
2018-9-1
新增的函数
1.
删除的函数

完成的功能
6.设置初始化配置文件

未完成的功能
5.按钮禁用/启用优化
7.本机ip组获取
8.智能化收发

碰到的问题

心得
1.fread()哪怕是以TCHAR方式打开的文件，读字符仍然是用char
	TCHAR fr_t = 0;
	_tfopen_s(&fileRead, inTchar, _T("rt"));
	fread(&fr_t, sizeof(char), 1, fileRead);
2.inet_pton
2018-9-1
新增的函数
1.
删除的函数

完成的功能
6.设置初始化配置文件

未完成的功能
5.按钮禁用/启用优化
7.本机ip组获取
8.智能化收发
9.局域网同类自动检索

碰到的问题

心得
1.DragFinish((HDROP)wParam);				//拖曳文件时生成的句柄，关闭
2018-9-5
新增的函数
1.
删除的函数

完成的功能
6.设置初始化配置文件

未完成的功能
5.按钮禁用/启用优化
7.本机ip组获取
8.智能化收发
9.局域网同类自动检索

碰到的问题

心得
1.选中多个文件拖曳，其路径可能不一样，要注意区别对待
2018-9-5
新增的函数
1.
删除的函数

完成的功能

未完成的功能
5.按钮禁用/启用优化
7.本机ip组获取
8.智能化收发
9.局域网同类自动检索

碰到的问题

心得
1.线程传递的参数，需要在线程函数内新建变量存储参数，传递来的参数会变化
2018-9-5
新增的函数
1.
删除的函数

完成的功能

未完成的功能
5.按钮禁用/启用优化
7.本机ip组获取
8.智能化收发
9.局域网同类自动检索

碰到的问题

心得
1.critical_section initializecriticalsection()在线程外调用
2.对线程传参数，需要理解指针传值带来的影响
3.critical_section关键段使用心得：未调用entercriticalsection和leavecriticalsection就操作资源被视为暴力操作，
								  这也说明critical_section只是用来标识当前所关联的资源是否正在被使用，
								  关联是指逻辑上的关联，并不需要声明某个资源归某个关键段所保护，
								  只是使用者自定义的一种标识，因为不论有无critical_section关键段，
								  资源都可以直接被访问，该结构体的作用是为了代替while轮询这种非原子操作，
								  通过判断该结构体来查询资源是否被使用，
								  两者作用相似，区分之处就是原子操作